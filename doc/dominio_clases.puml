@startuml OpoTestDomain

class Community

class User {
    - username
    - categorySelected
}

class Teacher {
    -conceptSelected
}

class Student

class Evaluation {
    - result
}

class Category {
    - subcategories
    - concepts[ ]
    - questions[ ]
}

class Test {
    - questions[  ]
    + category.getAllQuestions()
}

class Concept {
    - keyword
    - fakekeywords[ ]
    - definitions[ ]
    - relations[ ]
    
}

class Definition {
    - content
    - isFake
    - createdDate
    - justifications[ ]
}

class Justification {
    - content
    - isFake
    - createdDate
    - explication
}

class Relation {
    - contents[ ]
    - isFake
    - createdDate
}

abstract class Question {
    - statementImplementor
    - statement
    - answers[ ]

    + addAnswer()
    + bool isAnsweredBy(studentName)
}

abstract class StatementImplementor {
    - concept
    - solutions

    
    + addToConcept()
    + getSolutions()
}

class Answer {
    - content
    - isOK
    - isEvaluated
    - studentName
    - createdDate
    - evaluatedDate
}

class MultipleChoiceQuestion {
    + addAnswer(new SelectedOption())
     + setOptions(<StatementImplementor>)
}

class OpenQuestion {
    + addAnswer(new OpenAnswer())
    + addToSolutions(<StatementImplementor>)
}

class Option

class Correct

Class Incorrect

class OpenAnswer {
    - content
    - evaluatedBy
}

Class SelectedOption {

}

Community *--"2..n" User
Community o--"0..n" Category

Category o--"0..n" Category : Subcategories

User <|-- Teacher
User <|-- Student

Teacher ..> Concept
Category o--"0..n" Concept
Category o--"0..m" Question
StatementImplementor *-- Concept
Concept o--"0.." Definition
Definition o--"0..m" Justification: isFake = true
Justification o-- Explication: isFake = true
Concept o--"0..m" Relation

Student -->"0..n" Evaluation
Evaluation --> Test

Teacher ..> Evaluation
'Definition ..> OpenAnswer :isUsefulToConcept
'Justification ..> OpenAnswer :isUsefulToConcept
'Relation ..> OpenAnswer :isUsefulToConcept

Evaluation ..> OpenAnswer : manual (! isEvaluated)
Evaluation ..> SelectedOption : automatic

Test *--"1..n" Question
Question <|-- MultipleChoiceQuestion
Question <|-- OpenQuestion
Question *-  StatementImplementor
MultipleChoiceQuestion *--"2..n" Option
Option <|-- Incorrect
Option <|-- Correct
MultipleChoiceQuestion *-- Correct
MultipleChoiceQuestion *--"1..n" Incorrect
MultipleChoiceQuestion o--"0..n" SelectedOption
OpenQuestion o--"0..n" OpenAnswer
Question o--"0..n" Answer
Answer <|-- OpenAnswer
Answer <|-- SelectedOption
'OpenAnswer -* "1..m<n" Solution
'StatementImplementor o--"1..m" Solution
'Option ..> Solution

@enduml




