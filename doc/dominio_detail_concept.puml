@startuml ConceptDomainDetailBridge2

class Concept {
    - keyword
    - definitions[ ]
    - relations[ ]
}

class Definition {
    - content
    - isFake
}

class Relation

class Classification

class Composition

package Primary:withKeyword {
    abstract class DefinitionQuestion {
        - statement ="¿Qué es KEYWORD?"
        - Target = Definition
    }

    abstract  class ClassificationQuestion {
        - statement = "Qué tipos hay de KEYWORD"
        - Target = Classification
    }

    abstract class CompositionQuestion {
        - statement ="¿Qué conceptos destacarias del KEYWORD?"
        - Target = Composition
    }
}

class OpenAnswer {
    - content
    - isUsefulToConcept
    - isEvaluatedBy
}

class MultipleChoiceAnswer {
    - options [ ]
    - selectedOption
}

class Option {
    -content
}

package Bridge {
    abstract class Question {
        - concept
        - answersImplementor
        - answers[ ]
        - solutions[ ]
        # void setAnswerImplementor()
        + bool isAnsweredBy(studentName)
        + addToConcept()
        + getSolutions()
    }

    class AnswersImplementor {
        - studentName
        - isOk
        - isEvaluated
        - evaluatedDate
    }
}

Question o- AnswersImplementor
AnswersImplementor <|-- OpenAnswer
AnswersImplementor <|-- MultipleChoiceAnswer

MultipleChoiceAnswer *-- Option

DefinitionQuestion ..> Keyword
ClassificationQuestion ..> Keyword
CompositionQuestion ..> Keyword

Concept --* Question
Concept *- Keyword
Concept o-"0..n" Definition

Concept o- "0..n" Relation
Relation <|-- Classification
Relation <|-- Composition

Question <|-- DefinitionQuestion
DefinitionQuestion ..> Definition 
Question <|-- ClassificationQuestion
ClassificationQuestion <.. Classification 
Question <|-- CompositionQuestion
CompositionQuestion ..> Composition

@enduml

'Secundary <|-- OpenReverseDefinitionQuestion
'OpenReverseDefinitionQuestion *-- ReverseDefinitionTemplate
'OpenField "1..n" --o OpenReverseDefinitionQuestion
'OpenReverseDefinitionQuestion <.. Keyword :Fake <- OpenField

'Secundary <|-- OpenJustificationQuestion
'OpenJustificationQuestion *-- JustificationTemplate
'OpenJustificationQuestion o--"1..n" OpenField
'OpenJustificationQuestion <.. Justification :OpenField

'class Tertiary {
    '    withKeyword
    '    withDefinition
    '   withJustification
'}

'class OpenReverseDefinitionQuestion
'    "¿Qué es REALDEFINITION?"
'class OpenJustificationQuestion
'    "¿La KEYWORD es esta DEFINITION?¿Por qué?"

'MultipleChoiceTertiaryX:
'"Es cierto que la CLAVE no es FAKEDEFINITION porque FAKEJUSTIFICACION"
'    + 1 correct answer:
'"No porque la justificación es falsa"
'   + 3 incorrect answer:
'"Sí, por FAKEJUSTIFICATION"...








