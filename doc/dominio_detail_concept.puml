@startuml ConceptDomainDetailBridge

class Concept {
    - keyword
}

class Definition {
    - isFake
}

class Relation

class Classification

class Composition

package Primary:conceptElementUsed=Keyword {
    class DefinitionStatement {
        - statement ="¿Qué es KEYWORD?"
        - conceptElementTarget = Definition
    }

    class ClassificationStatement {
        - statement = "Qué tipos hay de KEYWORD"
        - conceptElementTarget = Classification
    }

    class CompositionStatement {
        - statement ="¿Qué conceptos destacarias del KEYWORD?"
        - conceptElementTarget = Composition
    }
}

abstract class OpenQuestion {
    -answers[openAnswer]
}

abstract class MultipleChoiceQuestion {
    - options
    - answers[selectedOption]
}

package Bridge {
    abstract class Question {
        - statementImplementor
        - answers[ ]
        # void setStatementImplementor()
        + bool isAnsweredBy(studentName)
    }

    class StatementImplementor {
        - concept
        - conceptElementUsed
        - conceptElementTarget
    }

}

Question *-> StatementImplementor
Question <|-- OpenQuestion
Question <|-- MultipleChoiceQuestion

OpenQuestion o--"0..n" OpenAnswer
MultipleChoiceQuestion *-- Option

DefinitionStatement ..> Concept
ClassificationStatement ..> Concept
CompositionStatement ..> Concept

Concept o-- "0..n" Question
Concept o--"0..n" Definition

Concept o-- "0..n" Relation
Relation <|-- Classification
Relation <|-- Composition


StatementImplementor <|-- DefinitionStatement
OpenAnswer <.. Definition:statementImplementorTarget=Definition
Option ..> Definition :statementImplementorTarget= Definition
StatementImplementor <|-- ClassificationStatement
'OpenClassificationQuestion <.. Classification :answers

StatementImplementor <|-- CompositionStatement
'OpenCompositionQuestion <.. Composition :answers


@enduml

'Secundary <|-- OpenReverseDefinitionQuestion
'OpenReverseDefinitionQuestion *-- ReverseDefinitionTemplate
'OpenField "1..n" --o OpenReverseDefinitionQuestion
'OpenReverseDefinitionQuestion <.. Keyword :Fake <- OpenField

'Secundary <|-- OpenJustificationQuestion
'OpenJustificationQuestion *-- JustificationTemplate
'OpenJustificationQuestion o--"1..n" OpenField
'OpenJustificationQuestion <.. Justification :OpenField

'class Tertiary {
    '    withKeyword
    '    withDefinition
    '   withJustification
    '
    '
    '
    '
    '
'}

'class OpenReverseDefinitionQuestion
'    "¿Qué es REALDEFINITION?"
'class OpenJustificationQuestion
'    "¿La KEYWORD es esta DEFINITION?¿Por qué?"

'MultipleChoiceTertiaryX:
'"Es cierto que la CLAVE no es FAKEDEFINITION porque FAKEJUSTIFICACION"
'    + 1 correct answer:
'"No porque la justificación es falsa"
'   + 3 incorrect answer:
'"Sí, por FAKEJUSTIFICATION"...








