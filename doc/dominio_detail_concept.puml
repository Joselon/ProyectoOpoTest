@startuml ConceptDomainDetail

class Concept

class Keyword

class Definition {
    -Real/Fake
}

class Justification {
    -Real/Fake
}

class Explanation

class Relation

class Classification

class Composition

class Level

class Primary {
    withKeyword
}

class Secundary {
    withKeyword
    withDefinition or withRelation
}

class OpenDefinitionQuestion

class OpenClassQuestion

class OpenCompositionQuestion

class OpenReverseDefinitionQuestion

class OpenJustificationQuestion

class Question

class Open

class Statement

class StatementTemplate


class DefinitionTemplate {
    "¿Qué es KEYWORD?"
}

class ClassTemplate {
    "Qué tipos hay de KEYWORD"
}

class CompositionTemplate {
    "¿Qué conceptos destacarias del KEYWORD?"
}

class JustificationTemplate {
    "¿La KEYWORD es esta DEFINITION?¿Por qué?"
}

class ReverseDefinitionTemplate {
    "¿Qué es REALDEFINITION?"
}

class Answer

class OpenField

Question <|-- Open
Open "0..n" -o Concept
Answer <|-- OpenField
Open o-- OpenField
Open *-- Level
Open *-- Statement
Statement ..> StatementTemplate

Concept *-- Keyword
Concept o--"0..n" Definition
Definition o-- "0..n" Justification:Fake
Justification o-- Explanation:Fake

Concept o-- "0..n" Relation
Relation <|-- Classification
Relation <|-- Composition
'Relation -->"1..m" Concept

Level <|-- Primary
Level <|-- Secundary

StatementTemplate <|-- DefinitionTemplate
StatementTemplate <|-- ClassTemplate
StatementTemplate <|-- CompositionTemplate

Primary <|-- OpenDefinitionQuestion
OpenDefinitionQuestion *-- DefinitionTemplate
OpenField "1..n" --o OpenDefinitionQuestion
OpenDefinitionQuestion <.. Definition: OpenField

Primary <|-- OpenClassQuestion
OpenClassQuestion *-- ClassTemplate
OpenField "1..n"--o OpenClassQuestion
OpenClassQuestion <.. Classification :OpenField

Primary <|-- OpenCompositionQuestion
OpenCompositionQuestion *-- CompositionTemplate
OpenField "1..n"--o OpenCompositionQuestion
OpenCompositionQuestion <.. Composition :OpenField

Secundary <|-- OpenReverseDefinitionQuestion
OpenReverseDefinitionQuestion *-- ReverseDefinitionTemplate
OpenField "1..n" --o OpenReverseDefinitionQuestion
OpenReverseDefinitionQuestion <.. Keyword :Fake <- OpenField

Secundary <|-- OpenJustificationQuestion
OpenJustificationQuestion *-- JustificationTemplate
OpenJustificationQuestion o--"1..n" OpenField
OpenJustificationQuestion <.. Justification :OpenField

@enduml
'class Tertiary {
    '    withKeyword
    '    withDefinition
    '   withJustification
    '
}

'MultipleChoiceTertiaryX:
'"Es cierto que la CLAVE no es FAKEDEFINITION porque FAKEJUSTIFICACION"
'    + 1 correct answer:
'"No porque la justificación es falsa"
'   + 3 incorrect answer:
'"Sí, por FAKEJUSTIFICATION"...








