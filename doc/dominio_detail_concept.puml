@startuml ConceptDomainDetail

class Concept {
    - keyword
    - state
}

'class Definition {
    '   - Real/Fake
    '
}

'class Justification {
    '    - Real/Fake
    '
}

'class Explanation

class Relation

class Classification

class Composition

enum State

class Primary {
    withKeyword
}

class Secundary {
    withKeyword
    withDefinition or withRelation
}
note "Link to the next detail" as link
link .- Secundary

class OpenDefinitionQuestion {
    - StatementType = "Definition"
    - statement ="¿Qué es KEYWORD?"

}

class OpenClassQuestion {
    - StatementType = "Classification"
    - statement = "Qué tipos hay de KEYWORD"

}

class OpenCompositionQuestion {
    - StatementType = "Composition"
    - statement ="¿Qué conceptos destacarias del KEYWORD?"

}

abstract class Question {
    - statement
    - StatementType
    - answers[]
}

class OpenQuestion {
    - answerType = "Open"
}

Question <|-- OpenQuestion
Question "0..n" -o Concept
'Question <|-- Open :-- answerType
OpenQuestion o--"0..n" OpenAnswer
Concept *-- State
Question ..> State: StatementType

Concept o--"0..n" Definition
'Definition o-- "0..n" Justification:Fake
'Justification o-- Explanation:Fake

Concept o-- "0..n" Relation
Relation <|-- Classification
Relation <|-- Composition

State <|-- Primary
State <|-- Secundary

'Question <|-- OpenDefinitionQuestion :--StatementType
'Question <|-- OpenClassQuestion :--StatementType
'Question <|-- OpenCompositionQuestion :--StatementType

OpenQuestion <|-- OpenDefinitionQuestion
OpenDefinitionQuestion <.. Definition: answers

OpenQuestion <|-- OpenClassQuestion
OpenClassQuestion <.. Classification :answers

OpenQuestion <|-- OpenCompositionQuestion
OpenCompositionQuestion <.. Composition :answers

@enduml

'Secundary <|-- OpenReverseDefinitionQuestion
'OpenReverseDefinitionQuestion *-- ReverseDefinitionTemplate
'OpenField "1..n" --o OpenReverseDefinitionQuestion
'OpenReverseDefinitionQuestion <.. Keyword :Fake <- OpenField

'Secundary <|-- OpenJustificationQuestion
'OpenJustificationQuestion *-- JustificationTemplate
'OpenJustificationQuestion o--"1..n" OpenField
'OpenJustificationQuestion <.. Justification :OpenField

'class Tertiary {
    '    withKeyword
    '    withDefinition
    '   withJustification
    '
    '
    '
    '
}

'class OpenReverseDefinitionQuestion
'    "¿Qué es REALDEFINITION?"
'class OpenJustificationQuestion
'    "¿La KEYWORD es esta DEFINITION?¿Por qué?"

'MultipleChoiceTertiaryX:
'"Es cierto que la CLAVE no es FAKEDEFINITION porque FAKEJUSTIFICACION"
'    + 1 correct answer:
'"No porque la justificación es falsa"
'   + 3 incorrect answer:
'"Sí, por FAKEJUSTIFICATION"...








